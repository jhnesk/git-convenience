#!/bin/sh
# git-task, checkout git branches by grep regex
#
# Copyright 2012 Johan Ask
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
VERSION=0.1
NAME=$0
USAGE="Usage: ${NAME} [-iEPhv] [-r remote] PATTERN"

# return value constants:
SUCCESS=0
E_ARGS=65

Help ()
{
	cat <<EOF
Quick access to git branches. Check out branches by pattern matching.

$USAGE

Options:
  -r, --remote=REMOTE    use a remote repository
  -i, --interactive      enable ability to choose between ambigious branches
  -E, --extended-regexp  use extended regexp
  -P, --perl-regexp      use perl regexp
  -h, --help             display this help and exit
  -v, --version          output version information and exit

Report bugs to <jhnesk@gmail.com>.
EOF
}

Version ()
{
	echo "git-task $VERSION"
}

Checkout ()
{
	if [ -z $REMOTE ]
	then
		git checkout "$1"
	else
		git checkout "$REMOTE/$1"
	fi
}

GetBranch ()
{
	if [ -z $REMOTE ]
	then
		branches=$(git branch | egrep -o '[^[:space:]]*$')
	else
		$(git remote show $REMOTE) &>/dev/null
		if [ $? -ne 0 ]
		then
			echo "Remote not found"
			exit $E_ARGS;
		fi
		branches=$(git ls-remote $REMOTE 2>/dev/null | grep '/heads/' | egrep -o '[^\/]*$' | egrep -v 'HEAD$')
	fi
	if [ -z $REGEXP ]
	then
		BRANCH=$(echo "$branches")
	else
		BRANCH=$(echo "$branches" | $GREP "$REGEXP")
	fi
}

GREP_ARG=-i

# parse arguments
OPT="r:iEPvh"
LONGOPT="remote:,interactive,extended-regexp,-perl-regexp,version,help"
OPTIONS=$(getopt -o ${OPT} -l ${LONGOPT} -n 'git-task' -- "$@")
eval set -- "$OPTIONS"

while true; do
	case "$1" in
		-r | --remote) REMOTE="$2" ; shift 2 ;;
		-i | --interactive) AMBIGOUOS_ACTION="i" ; shift ;;
		-E | --extended-regexp) GREP_ARG="$GREP_ARG -E" ; shift ;;
		-P | --perl-regexp) GREP_ARG="$GREP_ARG -P" ; shift ;;
		-h | --help) Help ; exit $SUCCESS ;;
		-v | --version) Version ; exit $SUCCESS ;;
		--) shift ; break ;;
		*) echo $USAGE"." ; exit $E_ARGS ;;
	esac
done

REGEXP=$1
GREP="$(which grep) $GREP_ARG"

GetBranch
lines=$(echo "$BRANCH"|egrep -v '^$' | wc -l)

if [ $lines -eq 1 ]
then
	Checkout $BRANCH
elif [ $lines -eq 0 ]
then
	echo "No branch matches $REGEXP"
else
	echo "Ambiguous branches for $REGEXP"

	case $AMBIGOUOS_ACTION in
		i)
			echo "$BRANCH" |$GREP --color -n "$REGEXP"
			echo -n "Select branch: "
			read choice
			if [ $choice -gt 0 -a $choice -le $lines ] 2>/dev/null
			then
				BRANCH=$(echo "$BRANCH" | head -n$choice |tail -n1)
				Checkout $BRANCH
			else
				echo "Invalid choice"
			fi
			;;
		*)
			echo "$BRANCH" |$GREP --color "$REGEXP"
			;;
	esac
fi

exit $?
